// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    name      String
    username  String    @unique
    cpf       String    @unique
    email     String    @unique
    role      roles     @default(CUSTOMER)
    phone     String    @unique @db.VarChar(15)
    password  String
    isActive  Boolean   @default(true)
    addresses Address[]
    Product   Product[]

    @@map("users")
}

model Address {
    id           Int     @id @default(autoincrement())
    cep          String
    state        String
    city         String
    neighborhood String
    street       String
    number       Int
    complement   String?
    userId       Int
    user         User    @relation(fields: [userId], references: [id])
}

model Product {
    id          Int            @id @default(autoincrement())
    title       String
    price       Float
    description String
    stock       Int
    userId      Int
    status      productsStatus @default(ACTIVE)
    createdBy   User           @relation(fields: [userId], references: [id])
    tags        Tag[]
    images      Image[]
    OrderItem   OrderItem[]

    @@map("products")
}

model Tag {
    id       Int       @id @default(autoincrement())
    tag      String    @unique
    products Product[]

    @@map("tags")
}

model Image {
    id        Int     @id @default(autoincrement())
    url       String  @unique
    productId Int
    product   Product @relation(fields: [productId], references: [id])

    @@map("images")
}

model Order {
    id             Int            @id @default(autoincrement())
    orderItem      OrderItem[]
    deliveryPrice  Float
    totalAmount    Float
    paymentId      Int?           @unique
    paymentStatus  paymentStatus
    deliveryStatus deliveryStatus
    addressId      Int            @unique

    address OrderAddress @relation(fields: [addressId], references: [id])

    @@map("orders")
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    title     String
    unitPrice Float
    quantity  Int
    productId Int
    orderId   Int
    order     Order   @relation(fields: [orderId], references: [id])
    product   Product @relation(fields: [productId], references: [id])

    @@map("order_items")
}

model OrderAddress {
    id           Int     @id @default(autoincrement())
    cep          String
    state        String
    city         String
    neighborhood String
    street       String
    number       Int
    complement   String?
    Order        Order?
}

enum roles {
    CUSTOMER
    MANAGER
    EMPLOYEE
}

enum productsStatus {
    ACTIVE
    DISABLED
}

enum paymentStatus {
    PENDING
    APPROVED
    REGECTED
    REFUNDED
}

enum deliveryStatus {
    PREPARING
    TRAVELING
    DELIVERED
}
